/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sho-B
 */
public class ClientGUI extends javax.swing.JFrame {

    Socket soc;
    BufferedReader reader;
    PrintStream writer;
    SocketAddress clientadd, serveradd;
    String line;

    /**
     * Creates new form main
     */
    public ClientGUI() {
        try {
            initComponents();
            clientadd = new InetSocketAddress(InetAddress.getLocalHost(), 0);
            soc = new Socket();
            soc.bind(clientadd);
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sip = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        spt = new javax.swing.JTextField();
        cnct = new javax.swing.JButton();
        Scrollpane = new javax.swing.JScrollPane();
        msgview = new javax.swing.JTextArea();
        msg = new javax.swing.JTextField();
        send = new javax.swing.JButton();
        exit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");
        setResizable(false);

        jLabel1.setText("Server IP");

        jLabel2.setText("Server Port");

        cnct.setText("Connect !");
        cnct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cnctActionPerformed(evt);
            }
        });

        msgview.setEditable(false);
        msgview.setColumns(20);
        msgview.setRows(5);
        msgview.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Scrollpane.setViewportView(msgview);

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(msg)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(send))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(sip, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                .addComponent(spt))
                            .addGap(18, 18, 18)
                            .addComponent(cnct))
                        .addComponent(Scrollpane))
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cnct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(send))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exit)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        setBounds(420, 120, 416, 357);
    }// </editor-fold>//GEN-END:initComponents

    private void cnctActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cnctActionPerformed
        // TODO add your handling code here:
        if (!sip.getText().isEmpty() && !spt.getText().isEmpty()) {
            try {
                serveradd = new InetSocketAddress(sip.getText(), Integer.parseInt(spt.getText()));
                if (soc.isBound()) {
                    soc.connect(serveradd);
                    if (soc.isConnected()) {
                        JOptionPane.showMessageDialog(null, "Connected To Server !!!", "Connected", JOptionPane.INFORMATION_MESSAGE);
                        msgview.append(" Connected to Server at " + new java.util.Date().toString());
                        writer = new PrintStream(soc.getOutputStream());
                        Thread recieve = new Thread(new Runnable() {

                            @Override
                            public void run() {

                                try {
                                    reader = new BufferedReader(new InputStreamReader(soc.getInputStream()));
                                    while ((line = reader.readLine()) != null) {
                                        msgview.append("\n Server: " + line);
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);

                                }
                            }
                        });
                        recieve.start();
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Network Unreachable !!! \nEnter Correct IP and Port Number !!!", "Connection Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Enter Server IP and Port Number !!!", "Connection Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cnctActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        try {
            // TODO add your handling code here:
if(soc.isConnected())
            writer.println("Connection Closed !!!");
            soc.close();
        } catch (IOException ex) {
            Logger.getLogger(ClientGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        // TODO add your handling code here:
        if (msg.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter Message to be sent !!!", "Input Error", JOptionPane.ERROR_MESSAGE);
        } else if (!soc.isConnected()) {
            JOptionPane.showMessageDialog(null, "Please Connect to a Server !!!", "Connection Error", JOptionPane.ERROR_MESSAGE);
        } else {
            writer.println(msg.getText());
            writer.flush();
            msgview.append("\n Client: " + msg.getText());
            msg.setText("");
        }
    }//GEN-LAST:event_sendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane Scrollpane;
    private javax.swing.JButton cnct;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField msg;
    private javax.swing.JTextArea msgview;
    private javax.swing.JButton send;
    private javax.swing.JTextField sip;
    private javax.swing.JTextField spt;
    // End of variables declaration//GEN-END:variables
}
